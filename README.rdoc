= Assert::View

== Description

Assert::View is a collection of view classes for displaying test results using the Assert testing framework (https://github.com/teaminsight/assert).  It allows any number of views to be created and used when running tests with Assert.

== Installation and Usage
Assert::View is a dependency of Assert and will be automatically installed when you install Assert:

    $ gem install assert   # will install assert-view as a dependency

=== Usage: override the default view with a different one 
Assert uses the Assert::View::Terminal view outputting to $stdout by default (https://github.com/teaminsight/assert/blob/master/lib/assert/setup/view.rb).  To override and use a different view, add the following to your ~/.assert/options.rb file:

    require 'assert/view/different_view'

    # Override the Assert view option and assign it an instance of the different view
    # Setup the view passing it the suite accessor and the IO to output on
    Assert.options.view = Assert::View::DifferentView.new(Assert.suite, $stdout)

=== Usage: define your own and override
So, ~/.assert/option.rb is just a ruby script that is required when Assert is setting itself up.  You can use this file to define your own custom view class and then override the Assert view option like above:

    # Say you wanted to tweak and make a better Terminal view
    require 'assert/view/terminal'
    module Assert::View
      class MyBetterTerminal < Terminal
        # override stuff and tweak it to your heart's content
      end
    end

    # Now override the view option to use your better terminal
    Assert.options.view = Assert::View::MyBetterTerminal.new(Assert.suite, $stdout)

== Assert::View::Base class
All views need to subclass the Assert::View::Base class.  This class implements a few core things that assert expects of its view classes:

=== Initializer
All view initializers take two things at minimum:
* *output_io*: an IO stream to output to ($stdout, etc...)
* *suite*: (optional) an instance of the core suite class; the suite of tests to run/render (defaults to Assert.suite - you probably shouldn't change this default unless you know what you are doing)

=== 'suite' reader
The suite reader provides access to the suite of tests that will be or has been run.  Use this reader to do things like count tests or test results, iterate through the tests and display detailed results, etc.  This reader provides all the model data needed to render your view.

=== 'render' method
The render method, as its name suggests, handles the overall rendering of the view.  All render methods should take the following arguments:
* *args*: not used right now - more for view backwards compatibility in the event that args are needed
* *runner*: runner is a block that is given to the render method by the Assert::Runner class in use.  The view class should call this block (@runner.call@) when the view is ready to run the suite of tests.  Output any view headers before calling; output any view summary/footer after calling.

Here is an excerpt from the Terminal class to illustrate how a render method could be implemented:

    def render(*args, &runner)
      self.io_puts(:load_stmt)            # header info

      if count(:tests) > 0
        runner.call if runner             # run the test suite
        self.io_puts(:detailed_results)   # show any result details
      end

      self.io_puts(:results_stmt)         # summary/footer info
    end

== License

Copyright (c) <year> <copyright holders>

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the "Software"), to deal in the Software without
restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following
conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.
